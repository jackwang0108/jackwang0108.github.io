<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo博客编写攻略</title>
    <url>/2025/06/28/Hexo%E5%8D%9A%E5%AE%A2%E7%BC%96%E5%86%99%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<blockquote>
<p>本文介绍了如何使用Hexo编写博客</p>
</blockquote>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250628181325661.png" alt="纸上得来终觉浅，绝知此事要躬行" style="zoom:50%;"></p>
<h1 id="hexo博客编写攻略">Hexo博客编写攻略</h1>
<blockquote>
<p>好记性不如烂笔头</p>
</blockquote>
<p>随着读的论文越来越多，越来越觉得以往把所有东西记在脑子里的方式越来越不够用了，越来越觉得需要一个笔记工具帮助我记录阅读论文时候的思考和感悟，因此经过诸多考量之后决定以
<code>Hexo</code> 博客的形式作为笔记工具。</p>
<h2 id="hexo-介绍">1. Hexo 介绍</h2>
<p><strong><code>Hexo</code> 是一个基于 <code>Node.js</code>
的静态博客框架</strong>，其核心原理是<strong>将用户编写的
<code>Markdown</code> 文件转换为静态 <code>HTML</code>
文件</strong>，在此基础上<strong>通过部署工具将这些文件发布到托管平台（如
GitHub Pages）</strong>。</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        Markdown与HTML
    </div>
    <div class="spoiler-content">
        <p><strong><code>Markdown</code> 是一种轻量级标记语言</strong>，由 John
Gruber 于 2004 年创建。它通过简单的纯文本符号（如
<code>#</code>、<code>*</code>、<code>&gt;</code>
等）实现内容格式化，从而<strong>专注于写作效率而非视觉呈现</strong>。</p>
<p><strong><code>HTML</code>（超文本标记语言）是构建网页的标准语言</strong>，使用标签（如
<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>）定义文档结构和内容。作为完整的标记语言，<strong>HTML
支持复杂的页面布局、多媒体嵌入和交互功能，但直接编写和维护较繁琐</strong>。</p>
<p><strong><code>Markdown</code> 本质是 <code>HTML</code>
的「快捷方式」——渲染时<code>Markdown</code>文档中的内容会被解析、转换为对应的
<code>HTML</code> 标签</strong>，例如： <code>**文本**</code> →
<code>&lt;strong&gt;文本&lt;/strong&gt;</code>。</p>
<p>因此，<strong>现代内容管理系统常允许混合使用<code>Markdown</code>与<code>HTML</code></strong>：用
<code>Markdown</code> 快速搭建内容框架，通过嵌入 HTML
实现特殊样式、表格或交互元素，例如在 Markdown 中插入
<code>&lt;div class="alert"&gt;</code> 来创建警告框。</p>
<p><code>Markdown</code>与<code>HTML</code>的哲学不同：<code>Markdown</code>关注「内容是什么」（What），而<code>HTML</code>则更注重「内容如何呈现」（How）。因此，<strong>对于以内容为主的博客/文档，使用<code>Markdown</code>进行编写会比直接使用<code>HTML</code>更高效、更易读</strong>。</p>
<p>综上所述，使用 <code>Markdown</code> 编写博客能够带来如下的好处：</p>
<ul>
<li>更方便的排版与书写体验（虽然有时候一些复杂的排版还是得通过内联
<code>HTML</code> 标签来实现）</li>
<li>很容易就可以将文章转换为 <code>HTML</code>
文件，从而发布到博客网站上（虽然我主要是拿来当做笔记软件）</li>
<li>转换为<code>HTML</code>后，可以很轻松的与下游的<code>JavaScript</code>等等工具集成，从而实现传统的笔记软件无法实现的更复杂的交互功能</li>
</ul>
<p>这也就是为什么我最终还是选择用<code>Hexo</code> +
<code>Markdown</code> + <code>Github Pages</code>
作为我的笔记工具的原因<span class="github-emoji"><span>😙</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p>

    </div>
</div>
<h3 id="hexo-核心工作流程">1.1 Hexo 核心工作流程</h3>
<p><code>Hexo</code> 的工作流程可以分为以下几个阶段：</p>
<h4 id="文章创建">1.1.1 <strong>文章创建</strong></h4>
<p>通过 <code>hexo new</code> 命令创建 <code>Markdown</code>
文件，<code>Hexo</code> 会在 <code>source/_posts</code> 或
<code>source/_drafts</code>
目录中生成对应的<code>Markdown</code>文件。<code>Markdown</code>文件中包含了文章内容以及
<code>Front-matter</code> 元数据。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new <span class="token string">"测试"</span>
tree source/_posts
bat source/_posts/测试.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629185253499.png" alt="文章创建"></p>
<blockquote>
<p>这里因为是新建的文章，所有没有任何内容，只有<code>Front-matter</code>
元数据，即在<code>---</code>之间的内容。这些内容在编译<code>Markdown</code>文件的时候辅助生成
HTML 文件，例如生成文章标题、日期、作者等信息。</p>
</blockquote>
<h4 id="编译-markdown-文件">1.1.2 <strong>编译 Markdown
文件</strong></h4>
<p>使用 <code>hexo generate</code> 命令，<code>Hexo</code> 会将
<code>Markdown</code> 文件解析为 <code>HTML</code>
文件。这个过程包括：</p>
<ul>
<li><strong>解析 <code>Markdown</code></strong>：通过 <code>Hexo</code>
的 <code>Markdown</code> 渲染器将 <code>Markdown</code> 转换为
<code>HTML</code>。实际上<code>Hexo</code>是通过<code>markdown-it</code>等第三方工具完成语法分析、构建<code>AST</code>，最终输出对应的<code>HTML</code>文件</li>
<li><strong>处理
<code>Front-matter</code></strong>：提取文章的元数据（如标题、日期、分类等），并将其嵌入到
<code>HTML</code> 页面中。</li>
<li><strong>应用主题</strong>：根据用户选择的主题，将 <code>HTML</code>
内容嵌入到主题模板中，生成完整的页面。</li>
</ul>
<p>编译完成后，<code>Hexo</code> 会将所有 <code>HTML</code>
文件、<code>CSS</code> 文件和 <code>JavaScript</code> 文件输出到
<code>public</code>
目录。这些文件是完全静态的，适合直接部署到托管平台。<strong>可以粗略的理解为，网站的所有代码和资源都被打包到了
<code>public</code> 目录中</strong>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo generate
<span class="token comment"># 忽略掉一些无关紧要的目录</span>
tree public <span class="token parameter variable">-D</span> <span class="token parameter variable">--level</span> <span class="token number">4</span> <span class="token parameter variable">-I</span> <span class="token string">"libs|js|medias|tags|css|categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629190307840.png" alt="将Markdown文章编译为HTML网页"></p>
<h4 id="本地预览">1.1.3 <strong>本地预览</strong></h4>
<p>在把编译得到的网页上传到公网，使得所有人都能看到之前，可以使用
<code>hexo server</code>
命令<strong>在本地启动一个静态服务器，预览编译后的网页效果</strong>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629191005491.png" alt="本地启动静态服务器"></p>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629191131340.png" alt="浏览器访问本地4000端口即可预览"></p>
<h4 id="部署到托管平台">1.1.4 <strong>部署到托管平台</strong></h4>
<p>如果万事OK的话，最后一步就是将编译好的静态文件部署到托管平台上（如
GitHub Pages、Netlify 等），使得所有人都能访问到你的博客。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong><code>hexo deploy</code>的本质就是通过第三方的插件将
<code>public</code>
目录中的静态文件上传到指定的托管平台</strong>。例如我这里就是上传到<code>Github Pages</code></p>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250628183424670.png" alt="使用hexo deploy发布文章" style="zoom: 25%;"></p>
<h3 id="hexo-的技术架构">1.2 Hexo 的技术架构</h3>
<blockquote>
<p>本节并非本文的重点，本文关注的是如何便捷的编写技术博客。因此对于<code>Hexo</code>的技术架构只是简单的介绍一下。</p>
</blockquote>
<p>实际上，通过上面的介绍，大致就可以了解 <code>Hexo</code>
的技术架构了。</p>
<p><strong><code>Hexo</code>本身是一个框架</strong>，类似于现在比较火的<code>Agent</code>/<code>MCP</code>：<strong>具体的工作由不同的工具（即插件）完成，<code>Hexo</code>通过一种统一的方式调用他们</strong>，从而完成文章的编写、编译、预览和部署这一整套流程。</p>
<p>具体而言，<code>Hexo</code> 的技术架构主要由以下几个部分组成：</p>
<h4 id="核心模块">1.2.1 <strong>核心模块</strong></h4>
<ul>
<li><strong>Hexo CLI</strong>：命令行工具，用于执行 <code>Hexo</code>
的各种操作（如创建文章、编译、部署等）。</li>
<li><strong>Hexo Core</strong>：核心框架，负责解析 <code>Markdown</code>
文件、处理 <code>Front-matter</code>、生成 <code>HTML</code>
文件等。</li>
<li><strong>Hexo Renderer</strong>：渲染器插件，用于将
<code>Markdown</code> 转换为 <code>HTML</code>。默认使用
<code>marked</code> 渲染器，但可以自行替换为其他渲染器（如
<code>markdown-it</code>、<code>hexo-pandoc</code>等等）。</li>
</ul>
<h4 id="主题系统">1.2.2 <strong>主题系统</strong></h4>
<p><code>Hexo</code>
允许用户在<code>themes</code>文件夹下编写自己的<code>CSS</code>/<code>HTML</code>/<code>JavaScript</code>等文件，从而自定义最终生成得到的<code>HTML</code>网页的外观和布局。</p>
<p>通常而言，可以自己从头写一个主题，但是通常还是直接找一个现成的主题直接拿来用即可。下载之后把主题直接放在<code>themes</code>文件夹下即可，通常而言一个主题包含了以下文件：</p>
<ul>
<li><strong>模板文件</strong>：定义页面结构（如
<code>layout.ejs</code>）。</li>
<li><strong>样式文件</strong>：定义页面样式（如 <code>CSS</code> 或
<code>SCSS</code> 文件）。</li>
<li><strong>脚本文件</strong>：添加动态功能（如 <code>JavaScript</code>
文件）。</li>
</ul>
<h4 id="插件系统">1.2.3 <strong>插件系统</strong></h4>
<p><code>Hexo</code>
提供了丰富的插件系统，用户可以通过<code>NPM</code>安装插件扩展<code>Hexo</code>的功能。例如：</p>
<ul>
<li><strong>SEO 优化插件</strong>：自动生成 <code>meta</code> 标签</li>
<li><strong>评论插件</strong>：集成评论系统（如 <code>Disqus</code> 或
<code>Gitalk</code>）</li>
<li><strong>搜索插件</strong>：添加站内搜索功能</li>
<li>……</li>
</ul>
<h3 id="hexo-的文件结构">1.3 Hexo 的文件结构</h3>
<p>经过上面的介绍，其实我们心里对<code>Hexo</code>博客网站的文件结构已经有了大致的了解。</p>
<p>说白了，<strong><code>Hexo</code>博客网站其实就是一个文件夹</strong>：文件夹中根据文件的作用的不同划分出不同的子目录，从而形成最终的静态网站。</p>
<p>Hexo 的文件结构如下：</p>
<pre class="line-numbers language-none"><code class="language-none">.
├── source/          # 用户的文章和资源文件
│   ├── _posts/      # 正式文章
│   ├── _drafts/     # 草稿文章
│   └── images/      # 图片资源（也可以用图床）
├── themes/          # 主题文件夹
├── public/          # 编译后的静态文件
├── node_modules/    # 第三方插件工具
├── scaffolds/       # 文章模板
├── _config.yml      # Hexo 的全局配置文件
└── package.json     # Node.js 项目配置文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="参考链接">1.4 参考链接</h3>
<p>关于<code>Hexo</code>的介绍就说这么多吧，毕竟这篇文章的重点是<strong>博客的内容，即<code>Markdown</code>中的内容，而非<code>Hexo</code>的技术细节</strong></p>
<p>关于如何搭建<code>Hexo</code>博客网站、主题配置、第三方插件等等，推荐一些博客：</p>
<ul>
<li><code>Hexo</code>官网：https://hexo.io/zh-cn/</li>
<li><code>Matery</code>主题：https://github.com/blinkfox/hexo-theme-matery</li>
<li><code>夜法之书</code>的博客：https://blog.17lai.site/categories/hexo/
<ul>
<li><code>Hexo Markdown</code>插件：https://blog.17lai.site/posts/cf0f47fd</li>
<li><code>Matery</code>主题定制：https://blog.17lai.site/posts/4d8a0b22/</li>
</ul></li>
</ul>
<h2 id="博客编写">2. 博客编写</h2>
<blockquote>
<p>总算是进入主题了 :)</p>
</blockquote>
<p>下面进入到这篇文章的重点，介绍一下<code>Hexo</code>博客的编写，即<code>Markdown</code>文件该怎么编写。</p>
<h3 id="概述">2.1 概述</h3>
<p><code>Hexo</code>的博客源文件，即通过<code>hexo new</code>生成的<code>Markdown</code>文件，通常的格式如下：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">Front-matter</span>
<span class="token punctuation">---</span></span>

正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中：</p>
<ul>
<li><code>Front-matter</code>
是一段位于开头的文本，定义文章的作者、标题、日期、分类等信息（元数据）</li>
<li><code>正文</code>就是我们编写的文章内容，使用 <code>Markdown</code>
语法进行排版和格式化。</li>
</ul>
<h3 id="front-matter">2.2 Front-matter</h3>
<p><code>Front-matter</code> 是一种 <code>Markdown</code>
文件的元数据，通常位于文件的开头，用来定义文章的属性和配置，是
<code>Hexo</code>、<code>Jekyll</code>
等静态网站生成器中非常重要的部分，能够帮助我们快速设置文章的标题、日期、分类、标签等信息。</p>
<p><code>Front-matter</code>中的元数据集会被第三方主题、第三场插件等等利用，从而实现不同的功能，例如：</p>
<ul>
<li><strong>文章标题</strong>：被第三方主题用于生成页面标题和导航链接</li>
<li><strong>发布时间</strong>：被第三方主题用于生成文章列表和归档页面</li>
<li><strong>文章标签</strong>：被第三方主题用于生成标签云和分类页面</li>
<li>……</li>
</ul>
<p>考虑到我使用的是 <code>Hexo Matery</code>
主题，因此下面主要介绍<code>Hexo Matery</code>主题和我安装的第三方插件会使用的<code>Front-matter</code>选项。</p>
<h4 id="hexo-matery-主题的-front-matter-选项">2.2.1 Hexo Matery 主题的
Front-matter 选项</h4>
<blockquote>
<p>以下内容参考自<code>Hexo Matery</code>主题的文档，链接：https://github.com/blinkfox/hexo-theme-matery</p>
</blockquote>
<p><code>Hexo Matery</code>主题如下的<code>Front-matter</code>
选项，所有内容均为<strong>非必填</strong>的。</p>
<table>
<colgroup>
<col style="width: 5%">
<col style="width: 13%">
<col style="width: 81%">
</colgroup>
<thead>
<tr>
<th>配置选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td><code>Markdown</code> 的文件标题</td>
<td>文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td>date</td>
<td>文件创建时的日期时间</td>
<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td>author</td>
<td>根 <code>_config.yml</code> 中的 <code>author</code></td>
<td>文章作者</td>
</tr>
<tr>
<td>img</td>
<td><code>featureImages</code> 中的某个值</td>
<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如:
<code>http://xxx.com/xxx.jpg</code></td>
</tr>
<tr>
<td>top</td>
<td><code>true</code></td>
<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为
<code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td>hide</td>
<td><code>false</code></td>
<td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td>
</tr>
<tr>
<td>cover</td>
<td><code>false</code></td>
<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td>coverImg</td>
<td>无</td>
<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td>password</td>
<td>无</td>
<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置
<code>password</code> 的值，该值必须是用 <code>SHA256</code>
加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code>
中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td>toc</td>
<td><code>true</code></td>
<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的
<code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td>mathjax</td>
<td><code>false</code></td>
<td>是否开启数学公式支持 ，本文章是否开启
<code>mathjax</code>，且需要在主题的 <code>_config.yml</code>
文件中也需要开启才行</td>
</tr>
<tr>
<td>summary</td>
<td>无</td>
<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td>categories</td>
<td>无</td>
<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td>keywords</td>
<td>文章标题</td>
<td>文章关键字，SEO 时需要</td>
</tr>
<tr>
<td>reprintPolicy</td>
<td>cc_by</td>
<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc,
cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>注意</strong>:</p>
<ol type="1">
<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的
<code>hashcode</code>
的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li>
<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中
<code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过
<code>date</code> 的值来作为唯一标识的。</li>
<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter
中设置采用了 SHA256 加密的 password 的值，还需要在主题的
<code>_config.yml</code> 中激活了配置。有些在线的 SHA256
加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li>
<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy
来给单个文章配置转载规则</li>
</ol>
</blockquote>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        最简示例
    </div>
    <div class="spoiler-content">
        <p>最简单的文章只需要填写<code>title</code>和<code>date</code>字段</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: typora-vue-theme主题介绍
date: 2018-09-07 09:25:00</span>
<span class="token punctuation">---</span></span>

正文内容

...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

    </div>
</div>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        最全示例
    </div>
    <div class="spoiler-content">
        <p>这是比较完整的示例，</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: Stable Diffusion原理推导
date: 2025-06-29 09:25:00
author: JackWang
img: /source/images/xxx.jpg
top: true
hide: false
cover: true
coverImg: /images/1.jpg
password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92
toc: false
mathjax: false
summary: 本文介绍了Stable Diffusion，并详细推导了Stable Diffusion中的公式
categories: 生成模型
tags:
  - Stable Diffusion
  - 生成模型
  - 原理推导</span>
<span class="token punctuation">---</span></span>

正文

...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

    </div>
</div>
<h4 id="第三方插件的-front-matter-选项">2.2.2 第三方插件的 Front-matter
选项</h4>
<p>目前没用到需要配置 Front-matter 的第三方插件，所以这一节先跳过</p>
<h3 id="hexo-scaffold-模版">2.3 Hexo Scaffold 模版</h3>
<p>实际上我们会发现，一篇文章需要填写的<code>Front-matter</code>选项还是比较多的，尤其是当我们使用第三方插件的时候。</p>
<p><strong>那么有没有一些好的方法，针对同一类的文章生成具有相同字段的<code>Front-matter</code>，我们只需要修改一下值即可？有的兄弟，有的，这就是<code>Hexo</code>的模板功能。</strong></p>
<p><code>Hexo</code>提供了模板功能，可以在<code>scaffolds</code>目录下创建模板文件，这些模板文件可以在创建新文章时被引用，从而自动生成具有相同<code>Front-matter</code>的文章。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tree scaffolds
bat scaffolds/draft.md
bat scaffolds/page.md
bat scaffolds/post.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，<code>Hexo</code>默认为我们提供了三类文章的模板，分别是：</p>
<ul>
<li><code>draft.md</code>：草稿文章的模板</li>
<li><code>page.md</code>：页面的模板</li>
<li><code>post.md</code>：正式文章的模板</li>
</ul>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629200627982.png" alt="Hexo提供的默认的三类文章的模板"></p>
<p>我们创建一个新的文章时候发生的事情实际上就是把对应类型文章的模板复制一份出来，并且将值替换为我们在命令行中指定的值。</p>
<h4 id="修改模板">2.3.1 修改模板</h4>
<p>我们修改一下<code>post.md</code>模板，添加一些我们常用的<code>Front-matter</code>选项。</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token coord">---</span>
title: {{ title }}
date: {{ date }}
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> author: JackWang
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> tags:
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> summary: 在这里填写摘要
</span><span class="token prefix inserted">+</span><span class="token line"> tags: [标签1, 标签2, ..]
</span><span class="token prefix inserted">+</span><span class="token line"> categories: [文章分类1, 文章分类2, ...]，最好是单分类多标签
</span><span class="token prefix inserted">+</span><span class="token line"> img: 文章特征图
</span><span class="token prefix inserted">+</span><span class="token line"> top: false，是否首页置顶文章，可以针对某篇文章单独开启
</span><span class="token prefix inserted">+</span><span class="token line"> toc: true，是否开启文章目录，可以针对某篇文章单独关闭
</span><span class="token prefix inserted">+</span><span class="token line"> mathjax: true，是否开启数学公式支持，可以针对某篇文章单独关闭
</span><span class="token prefix inserted">+</span><span class="token line"> hide: false，是否从首页隐藏文章
</span><span class="token prefix inserted">+</span><span class="token line"> cover: false, 文章是否加入到首页轮播中，可以针对某篇文章单独开启
</span><span class="token prefix inserted">+</span><span class="token line"> coverImg: 文章在首页轮播中显示的图片路径，如果没有，则默认使用文章的特色图片
</span><span class="token prefix inserted">+</span><span class="token line"> password: 文章阅读密码
</span></span><span class="token coord">---</span>

<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &gt; 一句话的Leadin
</span><span class="token prefix inserted">+</span><span class="token line"> 
</span><span class="token prefix inserted">+</span><span class="token line"> ![文章特征图](../themes/hexo-theme-matery/source/medias/featureimages/0.jpg)
</span><span class="token prefix inserted">+</span><span class="token line"> 
</span><span class="token prefix inserted">+</span><span class="token line"> # 文章标题
</span><span class="token prefix inserted">+</span><span class="token line"> 
</span><span class="token prefix inserted">+</span><span class="token line"> 正文内容
</span><span class="token prefix inserted">+</span><span class="token line"> </span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>未来我们创建的新的<code>post</code>类型的文章就会自动有这些内容了</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认创建post类型的文章</span>
hexo new <span class="token string">"修改后的Post类型文章测试"</span>
tree source/_posts
bat source/_posts/修改后的Post类型文章测试.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629202904900.png" alt="新创建的Post类型文章自动填充了Front-matter"></p>
<h4 id="自建模板">2.3.2 自建模板</h4>
<p>我们当然可以自己创建一些模板，放在<code>scaffolds</code>目录下，其中提前编写了一些需要填充的内容。例如我这里创建了一个<code>note</code>模板，专门用于论文阅读笔记。</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: {{ title }}
date: {{ date }}
summary: 在这里填写文章摘要
tags:
  - 论文阅读
  - 论文标签1
  - 论文标签2
categories: 论文分类
img: 文章特征图</span>
<span class="token punctuation">---</span></span>

<span class="token title important"><span class="token punctuation">#</span> 论文标题</span>

{% valkyrurl
[url=论文链接]
[title="论文标题"]
[avatar=论文特征图]
[desc="一句话的论文描述"]
%}

<span class="token list punctuation">-</span> 关键词：
<span class="token list punctuation">-</span> 发表会议：
<span class="token list punctuation">-</span> 作者：
<span class="token list punctuation">-</span> 代码：

<span class="token code"><span class="token punctuation">```</span><span class="token code-language">latex</span>
<span class="token code-block language-latex">% bibtex引用</span>
<span class="token punctuation">```</span></span>

<span class="token url"><span class="token operator">!</span>[<span class="token content">论文特征图</span>](<span class="token url">../themes/hexo-theme-matery/source/medias/featureimages/0.jpg</span>)</span>

正文内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>未来创建一个论文阅读笔记的时候，直接使用如下的命令即可：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new note <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        AlexNet论文阅读笔记示例
    </div>
    <div class="spoiler-content">
        <p>命令行运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new note <span class="token string">"AlexNet论文阅读笔记"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>而后填充如下内容：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token front-matter yaml language-yaml">title: ImageNet Classification with Deep Convolutional Neural Networks
summary: AlexNet论文阅读笔记
tags:
  - AlexNet
  - 图像分类
  - 卷积网络
categories: 图像分类
img: https://miro.medium.com/v2/resize:fit:1400/1*3XXMVUIrRSS99p5MSqj7Ig.png
date: 2025-06-29 20:47:48</span>
<span class="token punctuation">---</span></span>

<span class="token title important"><span class="token punctuation">#</span> ImageNet Classification with Deep Convolutional Neural Networks</span>



{% valkyrurl
[url=https://papers.nips.cc/paper_files/paper/2012/hash/c399862d3b9d6b76c8436e924a68c45b-Abstract.html]
[title="AlexNet"]
[avatar="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/NIPS-2012-Poster-Thumbnail.jpg"]
[desc="卷积神经网络在图像分类领域的开山之作"]
%}

<span class="token list punctuation">-</span> 关键词：图像分类、卷积网络
<span class="token list punctuation">-</span> 发表会议：Numerical Information Processing Systems (NIPS) 2012
<span class="token list punctuation">-</span> 作者：Alex Krizhevsky, Ilya Sutskever, Geoffrey E. Hinton
<span class="token list punctuation">-</span> 代码：https://github.com/pytorch/vision/blob/main/torchvision/models/alexnet.py

<span class="token code"><span class="token punctuation">```</span><span class="token code-language">latex</span>
<span class="token code-block language-latex">@inproceedings{alexnet,
 author = {Krizhevsky, Alex and Sutskever, Ilya and Hinton, Geoffrey E},
 booktitle = {Advances in Neural Information Processing Systems},
 editor = {F. Pereira and C.J. Burges and L. Bottou and K.Q. Weinberger},
 pages = {},
 publisher = {Curran Associates, Inc.},
 title = {ImageNet Classification with Deep Convolutional Neural Networks},
 url = {https://proceedings.neurips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf},
 volume = {25},
 year = {2012}
}</span>
<span class="token punctuation">```</span></span>



<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629205207349.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AlexNet网络架构<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最终得到效果如图：</p>
<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20250629212458201.png" alt="论文阅读笔记模板示例"></p>

    </div>
</div>
<h3 id="markdown-正文">2.3 Markdown 正文</h3>
<p><code>Markdown</code>正文部分的常规语法直接跳过了，这里主要介绍一下<code>Hexo</code>和一些其他第三方插件提供的功能。</p>
<p>参考：</p>
<ul>
<li>https://blog.17lai.site/posts/cf0f47fd/#tag-button</li>
<li>https://blog.17lai.site/posts/253706ff/#hexo%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE</li>
</ul>
<h4 id="引用格言">2.3.1 引用格言</h4>
<p><code>Markdown</code>代码中使用如下的语句可以创建一个引用格言：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% blockquote [author[, source]] <span class="token url">[<span class="token content">link</span>] [<span class="token variable">source_link_title</span>]</span> %}
content
{% endblockquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中：</p>
<ul>
<li><code>author</code>：可选参数，表示引用格言的作者</li>
<li><code>source</code>：可选参数，表示引用格言的来源</li>
<li><code>link</code>：可选参数，表示引用格言的链接</li>
<li><code>source_link_title</code>：可选参数，表示引用格言的来源链接的标题</li>
</ul>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        blockquote示例
    </div>
    <div class="spoiler-content">
        <p>示例1：<strong>什么参数都没有，就是普通的引用</strong></p>
<pre class="line-numbers language-none"><code class="language-none">{% blockquote %}
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.
{% endblockquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque
hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis
aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu
lorem.
</p>
</blockquote>
<p>示例2：<strong>引用书上的句子</strong></p>
<pre class="line-numbers language-none"><code class="language-none">{% blockquote David Levithan, Wide Awake %}
Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.
{% endblockquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>
Do not just seek happiness for yourself. Seek happiness for all. Through
kindness. Through mercy.
</p>
<footer>
<strong>David Levithan</strong><cite>Wide Awake</cite>
</footer>
</blockquote>
<p>示例3：<strong>引用Twitter上的内容</strong></p>
<pre class="line-numbers language-none"><code class="language-none">{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}
NEW: DevDocs now comes with syntax highlighting. http://devdocs.io
{% endblockquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>
NEW: DevDocs now comes with syntax highlighting. http://devdocs.io
</p>
<footer>
<strong><span class="citation" data-cites="DevDocs">@DevDocs</span></strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite>
</footer>
</blockquote>
<p>示例4：<strong>引用网络上的文章</strong></p>
<pre class="line-numbers language-none"><code class="language-none">{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}
Every interaction is both precious and an opportunity to delight.
{% endblockquote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>
Every interaction is both precious and an opportunity to delight.
</p>
<footer>
<strong>Seth
Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome
to Island Marketing</a></cite>
</footer>
</blockquote>

    </div>
</div>
<h4 id="tag-note">2.3.2 tag note</h4>
<p><code>Markdown</code>代码中使用如下的语句可以创建一个注意事项：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% note <span class="token url">[<span class="token content">class</span>] [<span class="token variable">no-icon</span>]</span> [summary] %}
Any content (support inline tags too).
{% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中：</p>
<ul>
<li><code>class</code>：可选参数，指定样式类名，默认为
<code>info</code>，可以是
<code>default | primary | success | info | warning | danger</code></li>
<li><code>no-icon</code>：可选参数，表示不显示图标</li>
<li><code>summary</code>：可选参数，表示摘要内容</li>
</ul>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        tag note示例
    </div>
    <div class="spoiler-content">
        <p>示例1：</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{% note danger 原始论文的代码有问题 %}

注意，原始论文给的代码是没法运行的，有问题的地方在：

<span class="token code"><span class="token punctuation">```</span><span class="token code-language">python</span>
<span class="token code-block language-python"># 原始论文代码
def forward(self, x):
    x = self.conv1(x)
    x = self.relu(x)
    x = self.maxpool(x)
    x = self.sasdasdasd(x)
    x = self.conv2(x)
    x = self.relu(x)
    x = self.maxpool(x)
    return x</span>
<span class="token punctuation">```</span></span>

<span class="token code-snippet code keyword">`self.sasdasdasd`</span>是一个自定义的算子，但是原始论文中并没有给出这个算子的定义，因此无法运行。

{% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<details class="note danger">
<summary>
<p>
原始论文的代码有问题
</p>
</summary>
<p>
注意，原始论文给的代码是没法运行的，有问题的地方在：
</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 原始论文代码</span>
<span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>sasdasdasd<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>
<code>self.sasdasdasd</code>是一个自定义的算子，但是原始论文中并没有给出这个算子的定义，因此无法运行。
</p>
</details>
<p>示例2：</p>
<pre class="line-numbers language-none"><code class="language-none">{% note success %}
#### Success Header
**Welcome** to [Hexo!](https://hexo.io)
{% endnote %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<div class="note success">
<p>
这段写的太好了！
</p>
</div>

    </div>
</div>
<blockquote>
<p>目前先写这么多，后面用到了其他的再更新:)</p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10/dist/style.css"><script src="https://fastly.jsdelivr.net/npm/d3@7"></script><script src="https://fastly.jsdelivr.net/npm/markmap-view@0.18.10"></script><script src="https://fastly.jsdelivr.net/npm/markmap-toolbar@0.18.10"></script>
<link rel="stylesheet" href="/css/markmap.css">

<script src="/js/markmap.js"></script>
]]></content>
      <categories>
        <category>Hexo博客编写</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>hexo</tag>
        <tag>写作</tag>
      </tags>
  </entry>
</search>
